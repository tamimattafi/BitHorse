import {
  __commonJS
} from "./chunk-76J2PTFD.js";

// node_modules/threex.domevents/threex.domevents.js
var require_threex_domevents = __commonJS({
  "node_modules/threex.domevents/threex.domevents.js"() {
    var THREEx = THREEx || {};
    THREEx.DomEvents = function(camera, domElement) {
      this._camera = camera || null;
      this._domElement = domElement || document;
      this._projector = new THREE.Projector();
      this._selected = null;
      this._boundObjs = {};
      var _this = this;
      this._$onClick = function() {
        _this._onClick.apply(_this, arguments);
      };
      this._$onDblClick = function() {
        _this._onDblClick.apply(_this, arguments);
      };
      this._$onMouseMove = function() {
        _this._onMouseMove.apply(_this, arguments);
      };
      this._$onMouseDown = function() {
        _this._onMouseDown.apply(_this, arguments);
      };
      this._$onMouseUp = function() {
        _this._onMouseUp.apply(_this, arguments);
      };
      this._$onTouchMove = function() {
        _this._onTouchMove.apply(_this, arguments);
      };
      this._$onTouchStart = function() {
        _this._onTouchStart.apply(_this, arguments);
      };
      this._$onTouchEnd = function() {
        _this._onTouchEnd.apply(_this, arguments);
      };
      this._$onContextmenu = function() {
        _this._onContextmenu.apply(_this, arguments);
      };
      this._domElement.addEventListener("click", this._$onClick, false);
      this._domElement.addEventListener("dblclick", this._$onDblClick, false);
      this._domElement.addEventListener("mousemove", this._$onMouseMove, false);
      this._domElement.addEventListener("mousedown", this._$onMouseDown, false);
      this._domElement.addEventListener("mouseup", this._$onMouseUp, false);
      this._domElement.addEventListener("touchmove", this._$onTouchMove, false);
      this._domElement.addEventListener("touchstart", this._$onTouchStart, false);
      this._domElement.addEventListener("touchend", this._$onTouchEnd, false);
      this._domElement.addEventListener("contextmenu", this._$onContextmenu, false);
    };
    THREEx.DomEvents.prototype.destroy = function() {
      this._domElement.removeEventListener("click", this._$onClick, false);
      this._domElement.removeEventListener("dblclick", this._$onDblClick, false);
      this._domElement.removeEventListener("mousemove", this._$onMouseMove, false);
      this._domElement.removeEventListener("mousedown", this._$onMouseDown, false);
      this._domElement.removeEventListener("mouseup", this._$onMouseUp, false);
      this._domElement.removeEventListener("touchmove", this._$onTouchMove, false);
      this._domElement.removeEventListener("touchstart", this._$onTouchStart, false);
      this._domElement.removeEventListener("touchend", this._$onTouchEnd, false);
      this._domElement.removeEventListener("contextmenu", this._$onContextmenu, false);
    };
    THREEx.DomEvents.eventNames = [
      "click",
      "dblclick",
      "mouseover",
      "mouseout",
      "mousemove",
      "mousedown",
      "mouseup",
      "contextmenu"
    ];
    THREEx.DomEvents.prototype._getRelativeMouseXY = function(domEvent) {
      var element = domEvent.target || domEvent.srcElement;
      if (element.nodeType === 3) {
        element = element.parentNode;
      }
      var elPosition = { x: 0, y: 0 };
      var tmpElement = element;
      var style = getComputedStyle(tmpElement, null);
      elPosition.y += parseInt(style.getPropertyValue("padding-top"), 10);
      elPosition.x += parseInt(style.getPropertyValue("padding-left"), 10);
      do {
        elPosition.x += tmpElement.offsetLeft;
        elPosition.y += tmpElement.offsetTop;
        style = getComputedStyle(tmpElement, null);
        elPosition.x += parseInt(style.getPropertyValue("border-left-width"), 10);
        elPosition.y += parseInt(style.getPropertyValue("border-top-width"), 10);
      } while (tmpElement = tmpElement.offsetParent);
      var elDimension = {
        width: element === window ? window.innerWidth : element.offsetWidth,
        height: element === window ? window.innerHeight : element.offsetHeight
      };
      return {
        x: +((domEvent.pageX - elPosition.x) / elDimension.width) * 2 - 1,
        y: -((domEvent.pageY - elPosition.y) / elDimension.height) * 2 + 1
      };
    };
    THREEx.DomEvents.prototype._objectCtxInit = function(object3d) {
      object3d._3xDomEvent = {};
    };
    THREEx.DomEvents.prototype._objectCtxDeinit = function(object3d) {
      delete object3d._3xDomEvent;
    };
    THREEx.DomEvents.prototype._objectCtxIsInit = function(object3d) {
      return object3d._3xDomEvent ? true : false;
    };
    THREEx.DomEvents.prototype._objectCtxGet = function(object3d) {
      return object3d._3xDomEvent;
    };
    THREEx.DomEvents.prototype.camera = function(value) {
      if (value)
        this._camera = value;
      return this._camera;
    };
    THREEx.DomEvents.prototype.bind = function(object3d, eventName, callback, useCapture) {
      console.assert(THREEx.DomEvents.eventNames.indexOf(eventName) !== -1, "not available events:" + eventName);
      if (!this._objectCtxIsInit(object3d))
        this._objectCtxInit(object3d);
      var objectCtx = this._objectCtxGet(object3d);
      if (!objectCtx[eventName + "Handlers"])
        objectCtx[eventName + "Handlers"] = [];
      objectCtx[eventName + "Handlers"].push({
        callback,
        useCapture
      });
      if (this._boundObjs[eventName] === void 0) {
        this._boundObjs[eventName] = [];
      }
      this._boundObjs[eventName].push(object3d);
    };
    THREEx.DomEvents.prototype.addEventListener = THREEx.DomEvents.prototype.bind;
    THREEx.DomEvents.prototype.unbind = function(object3d, eventName, callback, useCapture) {
      console.assert(THREEx.DomEvents.eventNames.indexOf(eventName) !== -1, "not available events:" + eventName);
      if (!this._objectCtxIsInit(object3d))
        this._objectCtxInit(object3d);
      var objectCtx = this._objectCtxGet(object3d);
      if (!objectCtx[eventName + "Handlers"])
        objectCtx[eventName + "Handlers"] = [];
      var handlers = objectCtx[eventName + "Handlers"];
      for (var i = 0; i < handlers.length; i++) {
        var handler = handlers[i];
        if (callback != handler.callback)
          continue;
        if (useCapture != handler.useCapture)
          continue;
        handlers.splice(i, 1);
        break;
      }
      var index = this._boundObjs[eventName].indexOf(object3d);
      console.assert(index !== -1);
      this._boundObjs[eventName].splice(index, 1);
    };
    THREEx.DomEvents.prototype.removeEventListener = THREEx.DomEvents.prototype.unbind;
    THREEx.DomEvents.prototype._bound = function(eventName, object3d) {
      var objectCtx = this._objectCtxGet(object3d);
      if (!objectCtx)
        return false;
      return objectCtx[eventName + "Handlers"] ? true : false;
    };
    THREEx.DomEvents.prototype._onMove = function(eventName, mouseX, mouseY, origDomEvent) {
      var boundObjs = this._boundObjs[eventName];
      if (boundObjs === void 0 || boundObjs.length === 0)
        return;
      var vector = new THREE.Vector3();
      var raycaster = new THREE.Raycaster();
      var dir = new THREE.Vector3();
      if (this._camera instanceof THREE.OrthographicCamera) {
        vector.set(mouseX, mouseY, -1);
        vector.unproject(this._camera);
        dir.set(0, 0, -1).transformDirection(this._camera.matrixWorld);
        raycaster.set(vector, dir);
      } else if (this._camera instanceof THREE.PerspectiveCamera) {
        vector.set(mouseX, mouseY, 0.5);
        vector.unproject(this._camera);
        raycaster.set(this._camera.position, vector.sub(this._camera.position).normalize());
      }
      var intersects = raycaster.intersectObjects(boundObjs);
      var oldSelected = this._selected;
      if (intersects.length > 0) {
        var notifyOver, notifyOut, notifyMove;
        var intersect = intersects[0];
        var newSelected = intersect.object;
        this._selected = newSelected;
        notifyMove = this._bound("mousemove", newSelected);
        if (oldSelected != newSelected) {
          notifyOver = this._bound("mouseover", newSelected);
          notifyOut = oldSelected && this._bound("mouseout", oldSelected);
        }
      } else {
        notifyOut = oldSelected && this._bound("mouseout", oldSelected);
        this._selected = null;
      }
      notifyMove && this._notify("mousemove", newSelected, origDomEvent, intersect);
      notifyOver && this._notify("mouseover", newSelected, origDomEvent, intersect);
      notifyOut && this._notify("mouseout", oldSelected, origDomEvent, intersect);
    };
    THREEx.DomEvents.prototype._onEvent = function(eventName, mouseX, mouseY, origDomEvent) {
      var boundObjs = this._boundObjs[eventName];
      if (boundObjs === void 0 || boundObjs.length === 0)
        return;
      var vector = new THREE.Vector3();
      var raycaster = new THREE.Raycaster();
      var dir = new THREE.Vector3();
      if (this._camera instanceof THREE.OrthographicCamera) {
        vector.set(mouseX, mouseY, -1);
        vector.unproject(this._camera);
        dir.set(0, 0, -1).transformDirection(this._camera.matrixWorld);
        raycaster.set(vector, dir);
      } else if (this._camera instanceof THREE.PerspectiveCamera) {
        vector.set(mouseX, mouseY, 0.5);
        vector.unproject(this._camera);
        raycaster.set(this._camera.position, vector.sub(this._camera.position).normalize());
      }
      var intersects = raycaster.intersectObjects(boundObjs, true);
      if (intersects.length === 0)
        return;
      var intersect = intersects[0];
      var object3d = intersect.object;
      var objectCtx = this._objectCtxGet(object3d);
      var objectParent = object3d.parent;
      while (typeof objectCtx == "undefined" && objectParent) {
        objectCtx = this._objectCtxGet(objectParent);
        objectParent = objectParent.parent;
      }
      if (!objectCtx)
        return;
      this._notify(eventName, object3d, origDomEvent, intersect);
    };
    THREEx.DomEvents.prototype._notify = function(eventName, object3d, origDomEvent, intersect) {
      var objectCtx = this._objectCtxGet(object3d);
      var handlers = objectCtx ? objectCtx[eventName + "Handlers"] : null;
      console.assert(arguments.length === 4);
      if (!objectCtx || !handlers || handlers.length === 0) {
        object3d.parent && this._notify(eventName, object3d.parent, origDomEvent, intersect);
        return;
      }
      var handlers = objectCtx[eventName + "Handlers"];
      for (var i = 0; i < handlers.length; i++) {
        var handler = handlers[i];
        var toPropagate = true;
        handler.callback({
          type: eventName,
          target: object3d,
          origDomEvent,
          intersect,
          stopPropagation: function() {
            toPropagate = false;
          }
        });
        if (!toPropagate)
          continue;
        if (handler.useCapture === false) {
          object3d.parent && this._notify(eventName, object3d.parent, origDomEvent, intersect);
        }
      }
    };
    THREEx.DomEvents.prototype._onMouseDown = function(event) {
      return this._onMouseEvent("mousedown", event);
    };
    THREEx.DomEvents.prototype._onMouseUp = function(event) {
      return this._onMouseEvent("mouseup", event);
    };
    THREEx.DomEvents.prototype._onMouseEvent = function(eventName, domEvent) {
      var mouseCoords = this._getRelativeMouseXY(domEvent);
      this._onEvent(eventName, mouseCoords.x, mouseCoords.y, domEvent);
    };
    THREEx.DomEvents.prototype._onMouseMove = function(domEvent) {
      var mouseCoords = this._getRelativeMouseXY(domEvent);
      this._onMove("mousemove", mouseCoords.x, mouseCoords.y, domEvent);
      this._onMove("mouseover", mouseCoords.x, mouseCoords.y, domEvent);
      this._onMove("mouseout", mouseCoords.x, mouseCoords.y, domEvent);
    };
    THREEx.DomEvents.prototype._onClick = function(event) {
      this._onMouseEvent("click", event);
    };
    THREEx.DomEvents.prototype._onDblClick = function(event) {
      this._onMouseEvent("dblclick", event);
    };
    THREEx.DomEvents.prototype._onContextmenu = function(event) {
      this._onMouseEvent("contextmenu", event);
    };
    THREEx.DomEvents.prototype._onTouchStart = function(event) {
      return this._onTouchEvent("mousedown", event);
    };
    THREEx.DomEvents.prototype._onTouchEnd = function(event) {
      return this._onTouchEvent("mouseup", event);
    };
    THREEx.DomEvents.prototype._onTouchMove = function(domEvent) {
      if (domEvent.touches.length != 1)
        return void 0;
      domEvent.preventDefault();
      var mouseX = +(domEvent.touches[0].pageX / window.innerWidth) * 2 - 1;
      var mouseY = -(domEvent.touches[0].pageY / window.innerHeight) * 2 + 1;
      this._onMove("mousemove", mouseX, mouseY, domEvent);
      this._onMove("mouseover", mouseX, mouseY, domEvent);
      this._onMove("mouseout", mouseX, mouseY, domEvent);
    };
    THREEx.DomEvents.prototype._onTouchEvent = function(eventName, domEvent) {
      if (domEvent.touches.length != 1)
        return void 0;
      domEvent.preventDefault();
      var mouseX = +(domEvent.touches[0].pageX / window.innerWidth) * 2 - 1;
      var mouseY = -(domEvent.touches[0].pageY / window.innerHeight) * 2 + 1;
      this._onEvent(eventName, mouseX, mouseY, domEvent);
    };
  }
});

// dep:threex_domevents
var threex_domevents_default = require_threex_domevents();
export {
  threex_domevents_default as default
};
//# sourceMappingURL=threex_domevents.js.map
